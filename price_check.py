import logging
import time
from bybit_driver import BybitDriver # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω

class PriceCheck:
    def __init__(self, symbol: str, bybit_driver: BybitDriver, 
                 logger: logging.Logger, telegram):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç PriceChecker.

        Args:
            symbol (str): –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTCUSDT').
            target_price (float): –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
            logger (logging.Logger): –û–±—ä–µ–∫—Ç –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        """
        self.symbol = symbol
        self.logger = logger
        self.telegram = telegram
        self.bybit_driver = bybit_driver
        self.last_price = None
        self.price_threshold = None
        self.price_snapped = False
        self.base_cond_price = None  # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫

    def set_base_cond_price(self, base_cond_price: float):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫.
        """
        self.base_cond_price = base_cond_price
        self.logger.info(f"base_cond_price –¥–ª—è {self.symbol} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {self.base_cond_price}")

    def curr_price(self):
        return self.bybit_driver.get_last_price(self.symbol)

    def check_price(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.

        Returns:
            bool: True, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ —Ä–∞–≤–Ω–∞ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ü–µ–ª–µ–≤—É—é, –∏–Ω–∞—á–µ False.
        """
        current_price = self.bybit_driver.get_last_price()
        if current_price is not None:
            if current_price >= self.base_cond_price:
                self.logger.info(f"üü¢ –¶–µ–Ω–∞ {self.symbol} ({current_price}) –¥–æ—Å—Ç–∏–≥–ª–∞ –∏–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É ({self.base_cond_price}).")
                return True
            else:
                self.logger.info(f"üî¥ –¶–µ–Ω–∞ {self.symbol} ({current_price}) –Ω–∏–∂–µ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã ({self.base_cond_price}).")
                return False
        else:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {self.symbol} –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö.")
            return False

    def monitor_price(self, interval_seconds: int = 5):
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ü–µ–Ω—É –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ, –ø—Ä–æ–≤–µ—Ä—è—è –µ–µ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª.

        Args:
            interval_seconds (int): –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ —Ü–µ–Ω—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
        """
        self.logger.info(f"–ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω—ã {self.symbol}. –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {self.base_cond_price}. –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_seconds} —Å–µ–∫.")
        while True:
            try:
                price_reached = self.check_price()
                if price_reached:
                    self.logger.info(f"‚úÖ –£—Å–ø–µ—Ö! –¶–µ–Ω–∞ {self.symbol} –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")
                    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
                    break
                    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å–æ–æ–±—â–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑
                    # time.sleep(interval_seconds)
                    # continue
                time.sleep(interval_seconds)
            except KeyboardInterrupt:
                self.logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                break
            except Exception as e:
                self.logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(interval_seconds) # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
                

    def reset_check_price_threshold(self, threshold):
        self.last_price = None
        self.price_threshold = threshold


    def _check_price_threshold(self) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ threshold –º–µ–∂–¥—É curr_price –∏ last_price.

        Args:
            threshold (float): –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
            curr_price (float): –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞.
            last_price (float): –ü—Ä–µ–¥—ã–¥—É—â–∞—è (–ø–æ—Å–ª–µ–¥–Ω—è—è) —Ü–µ–Ω–∞.

        Returns:
            bool: True, –µ—Å–ª–∏ threshold –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å—Ç—Ä–æ–≥–æ –º–µ–∂–¥—É curr_price –∏ last_price,
                –∏–Ω–∞—á–µ False.
        """
        # –ù–∞–π–¥–µ–º –º–∏–Ω–∏–º—É–º –∏ –º–∞–∫—Å–∏–º—É–º –∏–∑ –¥–≤—É—Ö —Ü–µ–Ω
        min_price = min(self.curr_price, self.last_price)
        max_price = max(self.curr_price, self.last_price)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ threshold  –º–µ–∂–¥—É min_price –∏ max_price
        if min_price <= self.price_threshold <= max_price:
            return True
        else:    
            return False
        
        
    def check_price_threshold(self, threshold_condition):
        last_price = self.bybit_driver.get_last_price()
        cond = f"last_price {threshold_condition}"
        if eval(cond):
            return True
        else:
            False



    def check_price_threshold_old(self):
        # –ü–µ—Ä–≤—ã–π —Ü–∏–∫–ª?
        if self.last_price == None:
            # –ü–µ—Ä–≤—ã–π —Ü–∏–∫–ª. –ü–æ—Ä–æ–≥ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
            self.last_price = self.bybit_driver.get_last_price()
            return False
        else:
            # –ù–µ–ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã
            # –ü–æ—Ä–æ–≥ –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ü–µ–Ω–æ–π?
            self.curr_price = self.bybit_driver.get_last_price()
            if self._check_price_threshold():
                # –ü–æ—Ä–æ–≥ –ø–µ—Ä–µ—Å–µ—á–µ–Ω. 
                self.last_price = self.curr_price
                return True
            else:
                # –ü–æ—Ä–æ–≥ –Ω–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω
                self.last_price = self.curr_price
                return False
            

    def check_price_snap(self, price_snap):
        if self.price_snapped:
            return True

        price_cond_met = self._check_price_cond(price_snap)
        if price_cond_met == None:
            self.price_snapped = True
            self.logger.info("Price Snap None.")
            return True
        elif price_cond_met: 
            self.price_snapped = True
            self.logger.info("Price Snap –∑–∞—â–µ–ª–∫–Ω—É—Ç.")
            return True
        else:
            return False
        
    def calc_price_cond(self, base_cond_price=None, side=None, offset_min=None):
        if base_cond_price is None:
            return ""
        
        cur_price = self.curr_price()

        # –í—ã—á–∏—Å–ª—è–µ–º offset
        offset = offset_min * cur_price

        # –í—ã—á–∏—Å–ª—è–µ–º cond_price
        if side == "Buy":
            cond_price = base_cond_price - offset
            price_cond = f"< {cond_price}"
        elif side == "Sell":
            cond_price = base_cond_price + offset
            price_cond = f"> {cond_price}"
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ —Å–¥–µ–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'Buy' –∏–ª–∏ 'Sell'.")

        return price_cond

    def check_price_cond(self, base_cond_price=None, side=None, offset_min=None):
        self.price_cond = self.calc_price_cond(base_cond_price=base_cond_price,  
                                               side=side, offset_min=offset_min)
        price_cond_met = self._check_price_cond(self.price_cond)
        if price_cond_met == None:
            return True
        elif price_cond_met: 
            return True
        else:
            return False


    def _check_price_cond(self, price_condition):
        if price_condition != "":
            # price_condition –≤–∫–ª—é—á–µ–Ω: –ø—Ä–æ–≤–µ—Ä—è–µ–º price condition
            curr_price = self.curr_price()
            cond = f"{curr_price} {price_condition}"
            if not eval(cond):
                # price condition –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω: –í—ã—Ö–æ–¥–∏–º
                return False
            else:
                # price condition –≤—ã–ø–æ–ª–Ω–µ–Ω
                return True
        else:
            # self.log("price condition –≤—ã–∫–ª—é—á–µ–Ω")
            return None


    def log(self, message):
        self.logger.info(message)
        self.telegram.send_telegram_message(message)

