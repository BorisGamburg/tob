from pybit.unified_trading import WebSocket
from time import sleep
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

def handle_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç WebSocket."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ä–¥–µ—Ä–∞–º
        if "topic" in message and message["topic"] == "order":
            for order in message["data"]:
                order_id = order.get("orderId", "N/A")
                status = order.get("orderStatus", "Unknown")
                side = order.get("side", "N/A")
                qty = order.get("qty", "N/A")
                price = order.get("price", "N/A")
                symbol = order.get("symbol", "N/A")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                if status == "Filled":
                    logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: {symbol} {side} {qty} @ {price} (ID: {order_id})")
                elif status == "Cancelled":
                    logger.info(f"‚ùå –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω: {symbol} {side} {qty} @ {price} (ID: {order_id})")
                elif status == "New":
                    logger.info(f"üìù –ù–æ–≤—ã–π –æ—Ä–¥–µ—Ä: {symbol} {side} {qty} @ {price} (ID: {order_id})")
                elif status == "PartiallyFilled":
                    logger.info(f"üîÑ –û—Ä–¥–µ—Ä —á–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω: {symbol} {side} {qty} @ {price} (ID: {order_id})")
                else:
                    logger.info(f"‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞: {symbol} {side} {qty} @ {price}, –°—Ç–∞—Ç—É—Å: {status} (ID: {order_id})")
        else:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket
    ws = WebSocket(
        testnet=True,
        channel_type="private",
        api_key="tdOOHexstm9ewR4JL6",
        api_secret="Nte5SL2QuL4rKQeScAPp9WXzVInIhXPVCXyA"
    )

    # –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∏–º–∞ –æ—Ä–¥–µ—Ä–æ–≤
    ws.order_stream(callback=handle_message)

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    try:
        while True:
            sleep(1)
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        ws.exit()  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

if __name__ == "__main__":
    main()