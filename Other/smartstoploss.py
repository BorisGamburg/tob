class SmartStopLoss:
    def __init__(self, symbol, poll_interval,
                 get_cur_balance_func, get_cur_pos_size_func, get_cur_price_func,
                 get_pos_side_func, reduce_pos_func, log_action_func, log_info_func,
                 set_trading_enabled_func, logger, bybit_driver: BybitDriver,
                 liquidation_warning_margin_ratio=0.10,
                 liquidation_critical_margin_ratio=0.05,
                 liquidation_price_proximity_warning=0.05, # 5% –¥–æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
                 liquidation_price_proximity_critical=0.01): # 1% –¥–æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ SmartStopLoss –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∏—Å–∫–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏.
        """
        self.logger = logger
        self.bybit_driver = bybit_driver
        self.symbol = symbol
        self.poll_interval = poll_interval
        self.get_cur_balance = get_cur_balance_func
        self.get_cur_pos_size = get_cur_pos_size_func
        self.get_cur_price = get_cur_price_func
        self.get_pos_side = get_pos_side_func
        self.reduce_pos = reduce_pos_func
        self.log_action = log_action_func
        self.log_info = log_info_func
        self.set_trading_enabled = set_trading_enabled_func
        self.trading_enabled = True
        self.telegram_notifier = Telegram(self.logger)
        self.liquidation_warning_margin = liquidation_warning_margin_ratio
        self.liquidation_critical_margin = liquidation_critical_margin_ratio
        self.liquidation_proximity_warning = liquidation_price_proximity_warning
        self.liquidation_proximity_critical = liquidation_price_proximity_critical

    def run(self):
        while True:
            try:
                positions = self.bybit_driver.get_positions(symbol=self.symbol)
                if positions and positions['result']['list']:
                    for position in positions['result']['list']:
                        if position['symbol'] == self.symbol and float(position['size']) != 0:
                            liquidation_price = float(position.get('liquidationPrice', float('inf'))) # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ü–µ–Ω—ã
                            margin_ratio = float(position.get('marginRatio', 1.0)) # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è ratio
                            current_price = self.get_cur_price()

                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –ø–æ –º–∞—Ä–∂–µ
                            if margin_ratio < self.liquidation_critical_margin:
                                self.logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∞—è –º–∞—Ä–∂–∞: {margin_ratio:.4f}")
                                self.telegram_notifier.send_telegram_message(f"üö® –ö–†–ò–¢–ò–ß–ù–û! –†–∏—Å–∫ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –ø–æ –º–∞—Ä–∂–µ: {margin_ratio:.4f}. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é.")
                                # –î–µ–π—Å—Ç–≤–∏—è –ø–æ –∑–∞–∫—Ä—ã—Ç–∏—é –ø–æ–∑–∏—Ü–∏–∏
                                self.reduce_pos(self.get_cur_pos_size()) # –ü—Ä–∏–º–µ—Ä: –∑–∞–∫—Ä—ã—Ç—å –≤—Å—é –ø–æ–∑–∏—Ü–∏—é
                            elif margin_ratio < self.liquidation_warning_margin:
                                self.logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–∏–∑–∫–∞—è –º–∞—Ä–∂–∞: {margin_ratio:.4f}")
                                self.telegram_notifier.send_telegram_message(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ù–∏–∑–∫–∞—è –º–∞—Ä–∂–∞: {margin_ratio:.4f}. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–ª–µ—á–∞ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏.")

                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ —Ü–µ–Ω—ã
                            if liquidation_price != float('inf') and current_price != 0:
                                proximity = abs(current_price - liquidation_price) / current_price
                                if proximity < self.liquidation_proximity_critical:
                                    self.logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –±–ª–∏–∑–∫–æ –∫ —Ü–µ–Ω–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: {proximity:.4f} ({current_price:.4f} vs {liquidation_price:.4f})")
                                    self.telegram_notifier.send_telegram_message(f"üö® –ö–†–ò–¢–ò–ß–ù–û! –¶–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –±–ª–∏–∑–∫–æ: {proximity:.4f} ({current_price:.4f} vs {liquidation_price:.4f}). –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é.")
                                    # –î–µ–π—Å—Ç–≤–∏—è –ø–æ –∑–∞–∫—Ä—ã—Ç–∏—é –ø–æ–∑–∏—Ü–∏–∏
                                    self.reduce_pos(self.get_cur_pos_size()) # –ü—Ä–∏–º–µ—Ä: –∑–∞–∫—Ä—ã—Ç—å –≤—Å—é –ø–æ–∑–∏—Ü–∏—é
                                elif proximity < self.liquidation_proximity_warning:
                                    self.logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ü–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –±–ª–∏–∑–∫–æ: {proximity:.4f} ({current_price:.4f} vs {liquidation_price:.4f})")
                                    self.telegram_notifier.send_telegram_message(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –¶–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ —Ä—è–¥–æ–º: {proximity:.4f} ({current_price:.4f} vs {liquidation_price:.4f}). –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å.")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: {e}")

            time.sleep(self.poll_interval)

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –≤–∞—à BybitDriver)
    import logging
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    logger = logging.getLogger(__name__)
    symbol = "BTCUSDT"

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BybitDriver (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å)
    bybit_driver_instance = BybitDriver(symbol=symbol, logger=logger)

    def get_bal():
        # ... (–≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞) ...
        return 1000

    def get_pos_size():
        buy_size, sell_size, _, _ = bybit_driver_instance.get_position_sizes()
        return buy_size + sell_size

    def get_price():
        return bybit_driver_instance.get_last_price()

    def get_side():
        buy_size, sell_size, _, _ = bybit_driver_instance.get_position_sizes()
        if buy_size > 0 and sell_size == 0:
            return "Buy"
        elif sell_size > 0 and buy_size == 0:
            return "Sell"
        else:
            return None

    def reduce_pos(new_size):
        print(f"Bot Action: –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–æ {new_size}")
        return True

    def log_act(message):
        logger.info(message)

    def log_inf(message):
        logger.info(message)

    def set_trade_enabled(enabled):
        print(f"Bot Trading Enabled: {enabled}")

    smart_stop = SmartStopLoss(
        symbol=symbol,
        poll_interval=10,
        get_cur_balance_func=get_bal,
        get_cur_pos_size_func=get_pos_size,
        get_cur_price_func=get_price,
        get_pos_side_func=get_side,
        reduce_pos_func=reduce_pos,
        log_action_func=log_act,
        log_info_func=log_inf,
        set_trading_enabled_func=set_trade_enabled,
        logger=logger,
        bybit_driver=bybit_driver_instance,
        liquidation_warning_margin_ratio=0.15,
        liquidation_critical_margin_ratio=0.08,
        liquidation_price_proximity_warning=0.03,
        liquidation_price_proximity_critical=0.015
    )

    print("–ó–∞–ø—É—Å–∫ –∫–ª–∞—Å—Å–∞ SmartStopLoss (–∫–æ–Ω—Ç—Ä–æ–ª—å —Ä–∏—Å–∫–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏)...")
    smart_stop.run()